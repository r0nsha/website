---

---

<div id="toc">
    <label for="toc-root">Table of Contents</label>
</div>

<style>
    #toc {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;

        label {
            font-weight: bold;
        }

        ul {
            padding-inline: 1rem;
            margin: 0;

            li {
                cursor: pointer;

                .active {
                    background: transparent;
                    color: var(--fg);
                }

                a {
                    text-decoration: none;

                    &:hover {
                        background: var(--p);
                        color: var(--fg);
                    }
                }
            }
        }
    }

    /* desktop */
    @media (min-width: 1400px) {
        #toc {
            --width: 20rem;
            inset-block-start: 4rem;
            width: var(--width);
            position: sticky;
            position: -webkit-sticky;
            float: inline-start;
            clear: both;
            margin-inline-start: calc(-1 * var(--width) - 1vw);

            label,
            li a {
                display: inline-flex;
                font-size: 0.9rem;
            }

            li {
                color: var(--g4);

                a {
                    color: var(--g4);
                }
            }
        }
    }

    /* mobile */
    @media (max-width: 1400px) {
        #toc {
            position: static;

            li {
                a {
                    line-height: 1.4;
                    color: var(--fg);

                    &:hover {
                        background: unset;
                    }
                }
            }
        }
    }
</style>

<script is:inline>
    document.addEventListener(
        "DOMContentLoaded",
        () => {
            const toc = document.getElementById("toc");

            if (!toc) {
                return;
            }

            const isMobile = window.matchMedia("(max-width: 1400px)").matches;

            const observer = new IntersectionObserver((entries) => {
                for (const entry of entries) {
                    const a = document.querySelector(`#toc li a[href="#${entry.target.id}"]`);
                    if (entry.isIntersecting || scrollY > entry.boundingClientRect.top) {
                        a.classList.add("active");
                    } else {
                        a.classList.remove("active");
                    }
                }
            });

            const headings = document.querySelectorAll("h2, h3, h4, h5, h6");

            const rootUl = document.createElement("ul");
            rootUl.id = "toc-root";
            toc.appendChild(rootUl);

            const stack = [{ level: 1, ul: rootUl }];

            for (const heading of headings) {
                const level = parseInt(heading.tagName.slice(1));
                const id = heading.id;

                const li = document.createElement("li");
                li.id = `toc-${id}`;

                const a = document.createElement("a");
                a.href = `#${id}`;
                a.textContent = heading.innerHTML;
                li.appendChild(a);

                const stackTop = stack[stack.length - 1];

                if (level > stackTop.level) {
                    const parentLi = stackTop.ul.lastElementChild;
                    if (parentLi) {
                        const newUl = document.createElement("ul");
                        parentLi.appendChild(newUl);
                        stack.push({ level, ul: newUl });
                        stack[stack.length - 1].ul.appendChild(li);
                    } else {
                        stackTop.ul.appendChild(li);
                    }
                } else {
                    while (stack.length > 1 && level < stack[stack.length - 1].level) {
                        stack.pop();
                    }
                    stack[stack.length - 1].ul.appendChild(li);
                }

                if (!isMobile) {
                    observer.observe(heading);
                }
            }
        },
        { once: true }
    );
</script>
