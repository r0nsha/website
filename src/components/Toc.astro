---

---

<ul id="toc"></ul>

<style>
    #toc {
        /* list-style: none; */
        /* padding: 0; */
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;

        li {
            cursor: pointer;
            color: var(--g4);

            &:hover,
            .active {
                background: transparent;
                color: var(--fg);
            }

            a {
                text-decoration: none;
                color: var(--g4);

                &:hover {
                    background: transparent;
                    color: var(--fg);
                }
            }
        }
    }

    /* desktop */
    @media (min-width: 1400px) {
        #toc {
            --width: 20rem;
            inset-block-start: 4rem;
            width: var(--width);
            position: sticky;
            position: -webkit-sticky;
            float: inline-start;
            clear: both;
            margin-inline-start: calc(-1 * var(--width) - 1vw);

            li a {
                font-size: 0.9rem;
            }
        }
    }

    /* mobile */
    @media (max-width: 1400px) {
        #toc {
            position: static;

            li {
                a {
                    color: var(--fg);

                    &:hover {
                        background: unset;
                    }
                }
            }
        }
    }
</style>

<script is:inline>
    document.addEventListener(
        "DOMContentLoaded",
        () => {
            const toc = document.getElementById("toc");

            if (!toc) {
                return;
            }

            const isMobile = window.matchMedia("(max-width: 1400px)").matches;

            const observer = new IntersectionObserver((entries) => {
                for (const entry of entries) {
                    const a = document.querySelector(`#toc li a[href="#${entry.target.id}"]`);
                    console.log(a, entry.target.id);
                    if (entry.isIntersecting || scrollY > entry.boundingClientRect.top) {
                        a.classList.add("active");
                    } else {
                        a.classList.remove("active");
                    }
                }
            });

            const headings = document.querySelectorAll("h2, h3, h4, h5, h6");

            let lastLevel = 0;
            /** @type {HTMLUListElement | undefined} */
            let currList;

            for (const heading of headings) {
                const level = parseInt(heading.tagName.slice(1));
                const id = heading.id;
                const li = document.createElement("li");
                li.id = `toc-${id}`;
                li.innerHTML = `<li><a href="#${id}">${heading.innerHTML}</a><ul></ul></li>`;

                if (currList && level > lastLevel) {
                    currList.appendChild(li);
                } else {
                    toc.appendChild(li);
                }

                currList = li.querySelector("ul");

                if (!isMobile) {
                    observer.observe(heading);
                }

                lastLevel = level;
            }
        },
        { once: true }
    );
</script>
